// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package repository

import (
	"context"
)

const createHighscore = `-- name: CreateHighscore :one
INSERT INTO highscores (
  username, score
) VALUES (
  $1, $2
)
RETURNING id, username, score
`

type CreateHighscoreParams struct {
	Username string
	Score    int32
}

func (q *Queries) CreateHighscore(ctx context.Context, arg CreateHighscoreParams) (Highscore, error) {
	row := q.db.QueryRowContext(ctx, createHighscore, arg.Username, arg.Score)
	var i Highscore
	err := row.Scan(&i.ID, &i.Username, &i.Score)
	return i, err
}

const deleteHighscore = `-- name: DeleteHighscore :exec
DELETE FROM highscores
WHERE username = $1
`

func (q *Queries) DeleteHighscore(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteHighscore, username)
	return err
}

const getHighscore = `-- name: GetHighscore :one
SELECT id, username, score FROM highscores
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetHighscore(ctx context.Context, username string) (Highscore, error) {
	row := q.db.QueryRowContext(ctx, getHighscore, username)
	var i Highscore
	err := row.Scan(&i.ID, &i.Username, &i.Score)
	return i, err
}

const listHighscores = `-- name: ListHighscores :many
SELECT id, username, score FROM highscores
ORDER BY score
`

func (q *Queries) ListHighscores(ctx context.Context) ([]Highscore, error) {
	rows, err := q.db.QueryContext(ctx, listHighscores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Highscore
	for rows.Next() {
		var i Highscore
		if err := rows.Scan(&i.ID, &i.Username, &i.Score); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
